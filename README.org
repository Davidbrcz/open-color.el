* OpenColor

  open-color.el provides minimalistic RGB color definition from [[https://yeun.github.io/open-color/][Open color]].

** Installation

   #+BEGIN_SRC emacs-lisp
     (use-package open-color
       ;; TODO: add to MELPA
       ;; :ensure t
       :quelpa
       (open-color :repo "a13/open-color.el" :fetcher github :version original))
   #+END_SRC

   But most likely one may want it use as a dependency, so once it on MELPA, add

   #+BEGIN_SRC emacs-lisp
     ;; Package-Requires: ((open-color "0.0.1"))
   #+END_SRC

   to the theme package headers, so /package.el/ could install it automatically.

** Usage

   #+BEGIN_SRC emacs-lisp
     (require 'open-color)
   #+END_SRC

   See a more complex example here: [[https://github.com/a13/lor-theme/blob/master/lor-oc-theme.el][lor-oc-theme]]

*** Available Colors
    See https://yeun.github.io/open-color/.
    Prefix  "open-color-" is added to a color name, so "black" becomes "open-color-black",  other colors have numbered suffixes, e.g. "open-color-red-9".

** Updating colors
   To update colors from upstream there's a [[https://babashka.org/][Babashka]] script included, usage:

   #+BEGIN_SRC shell
     bb update
   #+END_SRC

   or just /M-x babashka-tasks RET update/ if there's [[https://github.com/licht1stein/babashka.el][babashka.el]] available.

** Support for [[https://github.com/emacsmirror/rainbow-mode][Rainbow mode]]

It's possible to add support for rainbow-mode by using the mode `rainbow-keywords-hook`, as shown below.


   #+BEGIN_SRC emacs-lisp
     ;; The core idea is simply to match a string, and retrieve the underlying lisp object with that name to use its value for colortizaton.
     (defun rainbow-colorize-open-colors()
       (let* (
              (color-name (match-string-no-properties 1))
              (color-object (intern color-name))
              )
         ;; For some reasons, the regex doesn't always match the number at the end, so check if the object is actually bound
         (if (boundp color-object)
             (let ((color-value (symbol-value color-object)))
               (rainbow-colorize-match color-value)
               )
           ))
       )

     (defvar open-colors-rainbow-font-lock-keywords
       '(
         ("\\<\\(open-color-[a-z]*-[0-9]\\)\\>" 1 (rainbow-colorize-open-colors) )
         ("\\<\\(open-color-[a-z]*\\)\\>" 1 (rainbow-colorize-open-colors) ) 
         )
       "Font-lock keywords to add for open-color colors.")

     (defun add-open-color()
       (if rainbow-mode
             (font-lock-add-keywords nil open-colors-rainbow-font-lock-keywords 'end)
         (font-lock-remove-keywords nil open-colors-rainbow-font-lock-keywords)
         )
       )

     ;; Set color string's background with its value 
     (use-package rainbow-mode
       :config
       (setq rainbow-keywords-hook 'add-open-color)
       )
   #+END_SRC
   
** TODO To do
   - Extract version information
   - run generate.clj from workflows
   - Add to MELPA
